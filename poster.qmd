---
title: "Project Poster: HDI vs GDP Per Capita Visualization"
author: 
  - Tan Zi Xu
  - Teo Royston
  - Sim Yue Chong Samuel
  - Ng Kay Cheng
  - Ramasubramanian Srinithi
date: "2025-07-04"
format:
  html:
    self-contained: true
    code-fold: false
---

```{r full_plotly, echo=FALSE, warning=FALSE, message=FALSE}
library(readr)
library(dplyr)
library(plotly)
library(scales)
library(RColorBrewer)
library(htmltools)
library(htmlwidgets)
library(jsonlite)

# 1) Load & prep scatter data
df <- read_csv("data/transformed_data.csv", show_col_types = FALSE) %>%
  filter(!is.na(owid_region)) %>%
  mutate(
    hover_text = paste0(
      "<b>", Entity, "</b><br>",
      "GDP: $", comma(round(gdp)), "<br>",
      "HDI: ", round(hdi, 3), "<br>",
      "Pop: ", comma(round(population_historical)), "<br>",
      "Status: ", dev_status
    )
  )

# 2) Load per‑year stats (Year, dev_status, count, avg_gdp, avg_hdi)
stats <- read_csv("data/stats.csv", show_col_types = FALSE)
years <- sort(unique(df$Year))
years_json <- toJSON(years, auto_unbox = TRUE)
stats_json <- toJSON(stats, dataframe = "rows", auto_unbox = TRUE)

# 3) Prepare background HDI/GDP bands
hdi_bands <- tibble::tibble(
  ymin = c(0,0.55,0.70,0.80),
  ymax = c(0.55,0.70,0.80,1.00),
  fill = c("#f7fbff","#deebf7","#9ecae1","#3182bd")
)
cuts      <- c(1,1086,4255,13206, max(df$gdp,na.rm=TRUE))
gdp_bands <- tibble::tibble(
  xmin = cuts[-length(cuts)],
  xmax = cuts[-1],
  fill = c("#fff5f0","#fee0d2","#fc9272","#de2d26")
)

gdp_shapes <- lapply(seq_len(nrow(gdp_bands)), function(i){
  list(type="rect", xref="x",
       x0=gdp_bands$xmin[i], x1=gdp_bands$xmax[i],
       yref="paper", y0=0, y1=1,
       fillcolor=gdp_bands$fill[i],
       line=list(width=0),
       layer="below")
})
hdi_shapes <- lapply(seq_len(nrow(hdi_bands)), function(i){
  list(type="rect", xref="paper",
       x0=0, x1=1,
       yref="y", y0=hdi_bands$ymin[i], y1=hdi_bands$ymax[i],
       fillcolor=hdi_bands$fill[i],
       line=list(width=0),
       layer="below")
})

threshold_shapes <- list(
  # Vertical dotted line up to the meeting point
  list(
    type = "line",
    x0 = 12536, x1 = 12536,
    y0 = 0,     y1 = 0.8,
    line = list(
      dash = "dot",
      width = 2,
      color = "black"
    )
  ),
  # Horizontal dotted line up to the meeting point
  list(
    type = "line",
    x0 = 1,     x1 = 12536,
    y0 = 0.8,   y1 = 0.8,
    line = list(
      dash = "dot",
      width = 2,
      color = "black"
    )
  )
)

max_gdp <- max(df$gdp, na.rm=TRUE)

hdi_annots <- list(
  list(x = -0.11, xref = "paper", y = 0.275, yref = "y", text = "Low HDI",    showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13)),
  list(x = -0.11, xref = "paper", y = 0.625, yref = "y", text = "Medium HDI", showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13)),
  list(x = -0.11, xref = "paper", y = 0.75,  yref = "y", text = "High HDI",   showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13)),
  list(x = -0.11, xref = "paper", y = 0.9,   yref = "y", text = "Very High HDI", showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13))
)

gdp_annots <- list(
  list(
    x = mean(c(1, 1086)), y = -0.045, text = "Low income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  ),
  list(
    x = mean(c(1086, 4255)), y = -0.045, text = "Lower-middle income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  ),
  list(
    x = mean(c(4255, 13206)), y = -0.045, text = "Upper-middle income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  ),
  list(
    x = mean(c(13206, max_gdp)), y = -0.045, text = "High income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  )
)

axis_band_annotations <- c(hdi_annots, gdp_annots)

# 4) Build the animated scatter
palette <- brewer.pal(8, "Set2")
p <- plot_ly(
  df,
  x         = ~gdp,    y         = ~hdi,
  frame     = ~Year,
  type      = "scatter",  mode = "markers",
  color     = ~owid_region, colors = palette,
  size      = ~population_historical, sizes = c(5,500),
  text      = ~hover_text, hoverinfo = "text",
  marker    = list(opacity=0.8, line=list(color="black",width=1))
)

# 5) Custom play buttons - removed the top buttons, they'll be handled by bottom controls

# 6) Finalize layout
widget <- p %>%
  animation_opts(frame=800, transition=300, redraw=FALSE) %>%
  layout(
    shapes      = c(gdp_shapes, hdi_shapes, threshold_shapes),
    annotations = axis_band_annotations,
    xaxis       = list(
      type     = "log",
      title    = "GDP per capita (international-$, 2021 prices)",
      tickvals = c(1000,5000,10000,50000,100000),
      ticktext = c("$1k","$5k","$10k","$50k","$100k")
    ),
    yaxis       = list(
      title    = "Human Development Index",
      range    = c(0,1),
      tickvals = seq(0,1,0.1)
    ),
    margin      = list(l = 155, b = 90),
    legend      = list(title=list(text="Region")),
    updatemenus = list() # Remove the top buttons
  ) %>%
  config(displayModeBar=FALSE)

# 7) Enhanced JavaScript with unified animation control and expanded milestones
widget <- widget %>%
  htmlwidgets::onRender("
    function(el, x) {
      var gd = document.getElementById(el.id);
      var stats = window.stats_panel_data;
      var years = window.years_panel;
      
      // Expanded milestone data with all relevant global development events
      var milestoneYears = [1989, 1991, 1994, 1997, 2001, 2004, 2008, 2010, 2015, 2016, 2020, 2022];
      var milestoneTexts = {
        1989: 'Fall of Berlin Wall:<br>End of Cold War era, beginning<br>of major political transitions',
        1991: 'Soviet Union Collapse:<br>Major geopolitical shift affecting<br>Eastern European development',
        1994: 'Rwanda Genocide:<br>Humanitarian crisis highlighting<br>need for conflict prevention',
        1997: 'Asian Financial Crisis:<br>Economic downturn affecting<br>emerging market development',
        2001: 'Millennium Development Goals:<br>Global commitment to<br>reducing poverty and inequality',
        2004: 'Indian Ocean Tsunami:<br>Natural disaster affecting<br>development in affected regions',
        2008: 'Global Financial Crisis:<br>Economic downturn affecting<br>development worldwide',
        2010: 'Arab Spring Begins:<br>Political upheaval affecting<br>Middle East and North Africa',
        2015: 'Sustainable Development Goals:<br>New framework for global<br>development agenda',
        2016: 'Paris Climate Agreement:<br>Global commitment to<br>climate action and sustainability',
        2020: 'COVID-19 Pandemic:<br>Global health crisis impacting<br>human development progress',
        2022: 'Russia-Ukraine War:<br>Major conflict affecting<br>global economy and development'
      };
      
      var isPlaying = false;
      var currentYearIndex = 0;
      var animationTimeout;
      var allYears = [];
      var isTimelineMode = false; // Track which mode we're in
      
      // Extract all years from data
      if (years && years.length) {
        allYears = years.slice(); // Copy array
      }
      
      // Function to stop any running animation
      function stopAnimation() {
        if (isPlaying) {
          isPlaying = false;
          clearTimeout(animationTimeout);
          
          // Reset all button texts
          var timelineBtn = document.getElementById('timeline-btn');
          var playBtn = document.getElementById('play-btn');
          
          if (timelineBtn && timelineBtn.textContent.includes('Pause')) {
            timelineBtn.textContent = '▶ Play Timeline';
          }
          if (playBtn && playBtn.textContent.includes('Pause')) {
            playBtn.textContent = '▶ Play';
          }
        }
      }
      
      // Function to reset to start
      function resetToStart() {
        stopAnimation();
        currentYearIndex = 0;
        if (allYears.length > 0) {
          var firstYear = allYears[0];
          animateToYear(firstYear);
          updateStats(firstYear);
          var picker = document.getElementById('year-picker');
          if (picker) picker.value = firstYear;
        }
      }
      
      // Function to update annotations with milestones
      function updateAnnotations(year, showMilestone) {
        var currentAnnotations = [];
        
        // Add existing axis annotations
        if (gd.layout && gd.layout.annotations) {
          currentAnnotations = gd.layout.annotations.filter(function(ann) {
            return ann.text && (ann.text.includes('HDI') || ann.text.includes('income'));
          });
        }
        
        // Add milestone annotation at bottom right of the plot area
        if (showMilestone && milestoneTexts[year]) {
          currentAnnotations.push({
            text: milestoneTexts[year],
            x: 0.98, y: 0.02,
            xref: 'paper', yref: 'paper',
            xanchor: 'right', yanchor: 'bottom',
            showarrow: false,
            font: {size: 11, color: 'darkred', family: 'Arial'},
            bgcolor: 'rgba(255,255,255,0.95)',
            bordercolor: 'darkred',
            borderwidth: 2,
            borderpad: 6
          });
        }
        
        Plotly.relayout(gd, {annotations: currentAnnotations});
      }
      
      // Function to animate to specific year
      function animateToYear(year) {
        Plotly.animate(gd, [year.toString()], {
          transition: {duration: 300},
          frame: {duration: 0, redraw: false}
        });
        updateAnnotations(year, isTimelineMode && milestoneYears.includes(year));
      }
      
      // Custom animation function
      function customAnimate() {
        if (!isPlaying || currentYearIndex >= allYears.length) {
          stopAnimation();
          return;
        }
        
        var currentYear = allYears[currentYearIndex];
        animateToYear(currentYear);
        
        // Update stats and picker
        updateStats(currentYear);
        var picker = document.getElementById('year-picker');
        if (picker) picker.value = currentYear;
        
        // Check if this is a milestone year (only in timeline mode)
        var isMilestone = isTimelineMode && milestoneYears.includes(currentYear);
        var delay = isMilestone ? 6000 : 800; // 6s for milestone, 0.8s for regular
        
        currentYearIndex++;
        animationTimeout = setTimeout(customAnimate, delay);
      }
      
      // Function to start animation
      function startAnimation(timelineMode, buttonElement) {
        // Stop any existing animation first
        stopAnimation();
        
        // Only reset to start if we're switching modes or not currently paused at a position
        if (isTimelineMode !== timelineMode || currentYearIndex === 0) {
          currentYearIndex = 0;
        }
        
        isTimelineMode = timelineMode;
        
        // Start new animation
        isPlaying = true;
        
        // Update button text
        if (timelineMode) {
          buttonElement.textContent = '⏸ Pause Timeline';
        } else {
          buttonElement.textContent = '⏸ Pause';
        }
        
        customAnimate();
      }
      
      // Override both play buttons behavior - now looking for bottom buttons only
      function setupCustomControls() {
        // Remove any existing top buttons
        var topButtons = document.querySelectorAll('.updatemenu-button');
        topButtons.forEach(function(btn) {
          if (btn.closest('.js-plotly-plot')) {
            btn.style.display = 'none';
          }
        });
        
        // Setup bottom custom buttons
        setupBottomButtons();
      }
      
      function setupBottomButtons() {
        var timelineBtn = document.getElementById('timeline-btn');
        var playBtn = document.getElementById('play-btn');
        
        if (timelineBtn) {
          timelineBtn.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            if (isPlaying && isTimelineMode) {
              stopAnimation();
            } else {
              startAnimation(true, this);
            }
          };
        }
        
        if (playBtn) {
          playBtn.onclick = function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            if (isPlaying && !isTimelineMode) {
              stopAnimation();
            } else {
              startAnimation(false, this);
            }
          };
        }
        
        if (!timelineBtn || !playBtn) {
          setTimeout(setupBottomButtons, 100);
        }
      }
      
      // Setup custom controls after plotly renders
      setTimeout(setupCustomControls, 1000);
      
      // --- Original stats panel functionality ---
      var picker = document.getElementById('year-picker');
      if (picker && picker.options.length === 0 && years && years.length) {
        years.forEach(function(y) {
          var opt = document.createElement('option');
          opt.value = y;
          opt.text = y;
          picker.appendChild(opt);
        });
        picker.onchange = function() {
          // Stop any running animation when user manually selects year
          stopAnimation();
          
          var selectedYear = parseInt(this.value);
          updateStats(selectedYear);
          updateAnnotations(selectedYear, false); // Don't show milestones for manual selection
          if (gd) {
            Plotly.animate(gd, {frame: {redraw: true, name: this.value}}, {mode: 'immediate'});
          }
        };
      }

      var sl = document.getElementById('size-legend');
      if (sl && !sl.innerHTML) {
        sl.style.background = 'rgba(255,255,255,0.97)';
        sl.style.borderRadius = '8px';
        sl.style.boxShadow = '0 0 6px rgba(0,0,0,0.10)';
        sl.style.fontSize = '13px';
        sl.style.padding = '10px 10px';
        sl.innerHTML =
          '<div><strong>Circles sized by</strong><br>Population</div>' +
          '<div style=\"margin-top:6px;display:flex;align-items:center;gap:6px;\">' +
            '<div style=\"width:20px;height:20px;border-radius:50%;background:lightgray;\"></div>' +
            '<span>600&nbsp;M</span>' +
          '</div>' +
          '<div style=\"margin-top:4px;display:flex;align-items:center;gap:6px;\">' +
            '<div style=\"width:30px;height:30px;border-radius:50%;background:lightgray;\"></div>' +
            '<span>1.4&nbsp;B</span>' +
          '</div>';
      }

      function updateStats(year) {
        var sb = document.getElementById('stats-box');
        if (!sb) return;
        var sub  = stats.filter(d => +d.Year == +year);
        var devo = sub.find(d => d.dev_status=='Developing'),
            dev  = sub.find(d => d.dev_status=='Developed');
        if (!devo || !dev) {
          sb.innerHTML = '<span style=\"color:red;\">No data for year ' + year + '</span>';
          return;
        }
        sb.style.background = 'rgba(255,255,255,0.98)';
        sb.style.borderRadius = '10px';
        sb.style.boxShadow = '0 2px 10px rgba(0,0,0,0.11)';
        sb.style.fontSize = '14px';
        sb.style.padding = '12px 12px';
        sb.innerHTML =
          '<b>Year: ' + year + '</b><br>' +
          '<b>Developing</b><br>' +
          devo.count + ' countries<br>' +
          'Avg GDP: $' + (+devo.avg_gdp).toLocaleString() + '<br>' +
          'Avg HDI: '  + (+devo.avg_hdi).toFixed(3) + '<br><br>' +
          '<b>Developed</b><br>' +
          dev.count  + ' countries<br>' +
          'Avg GDP: $' + (+dev.avg_gdp).toLocaleString() + '<br>' +
          'Avg HDI: '  + (+dev.avg_hdi).toFixed(3);
      }

      // Initialize with first year
      if (picker && years && years.length) {
        picker.value = years[0];
        updateStats(years[0]);
        updateAnnotations(years[0], false);
        if (gd) {
          Plotly.animate(gd, {frame: {redraw: true, name: years[0]}}, {mode: 'immediate'});
        }
      }
    }
  ")

# 8) Inject stats JSON and display
browsable(
  tagList(
    widget,
    tags$div(
      id = "bottom-panel-row",
      style = "display:flex;flex-direction:row;gap:28px;align-items:flex-start;justify-content:flex-end;margin-top:16px;margin-right:32px;",
      tags$div(
        style="display:flex;align-items:center;gap:8px;",
        tags$button(id="play-btn", "▶ Play", style="font-size:14px;padding:8px 16px;cursor:pointer;"),
        tags$button(id="timeline-btn", "▶ Play Timeline", style="font-size:14px;padding:8px 16px;cursor:pointer;"),
        tags$label("Select year:", `for`="year-picker", style="font-size:15px;margin-left:8px;"),
        tags$select(id="year-picker", style="font-size:15px;")
      ),
      tags$div(id="stats-box", style="min-width:210px;"),
      tags$div(id="size-legend", style="min-width:120px;")
    ),
    tags$script(HTML(sprintf("window.stats_panel_data = %s;", stats_json))),
    tags$script(HTML(sprintf("window.years_panel = %s;", years_json)))
  )
)
```