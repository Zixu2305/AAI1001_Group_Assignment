---
title: "Project Poster: HDI vs GDP Per Capita Visualization"
author: 
  - Tan Zi Xu
  - Teo Royston
  - Sim Yue Chong Samuel
  - Ng Kay Cheng
  - Ramasubramanian Srinithi
date: "2025-07-04"
format:
  html:
    self-contained: true
    code-fold: false
---

```{r full_plotly, echo=FALSE, warning=FALSE, message=FALSE}
library(readr)
library(dplyr)
library(plotly)
library(scales)
library(RColorBrewer)
library(htmltools)
library(htmlwidgets)
library(jsonlite)

# 1) Load & prep scatter data
df <- read_csv("data/transformed_data.csv", show_col_types = FALSE) %>%
  filter(!is.na(owid_region)) %>%
  mutate(
    hover_text = paste0(
      "<b>", Entity, "</b><br>",
      "GDP: $", comma(round(gdp)), "<br>",
      "HDI: ", round(hdi, 3), "<br>",
      "Pop: ", comma(round(population_historical)), "<br>",
      "Status: ", dev_status
    )
  )

# 2) Load per‑year stats (Year, dev_status, count, avg_gdp, avg_hdi)
stats <- read_csv("data/stats.csv", show_col_types = FALSE)
years <- sort(unique(df$Year))
years_json <- toJSON(years, auto_unbox = TRUE)
stats_json <- toJSON(stats, dataframe = "rows", auto_unbox = TRUE)

# 3) Prepare background HDI/GDP bands
hdi_bands <- tibble::tibble(
  ymin = c(0,0.55,0.70,0.80),
  ymax = c(0.55,0.70,0.80,1.00),
  fill = c("#f7fbff","#deebf7","#9ecae1","#3182bd")
)
cuts      <- c(1,1086,4255,13206, max(df$gdp,na.rm=TRUE))
gdp_bands <- tibble::tibble(
  xmin = cuts[-length(cuts)],
  xmax = cuts[-1],
  fill = c("#fff5f0","#fee0d2","#fc9272","#de2d26")
)

gdp_shapes <- lapply(seq_len(nrow(gdp_bands)), function(i){
  list(type="rect", xref="x",
       x0=gdp_bands$xmin[i], x1=gdp_bands$xmax[i],
       yref="paper", y0=0, y1=1,
       fillcolor=gdp_bands$fill[i],
       line=list(width=0),
       layer="below")
})
hdi_shapes <- lapply(seq_len(nrow(hdi_bands)), function(i){
  list(type="rect", xref="paper",
       x0=0, x1=1,
       yref="y", y0=hdi_bands$ymin[i], y1=hdi_bands$ymax[i],
       fillcolor=hdi_bands$fill[i],
       line=list(width=0),
       layer="below")
})

threshold_shapes <- list(
  # Vertical dotted line up to the meeting point
  list(
    type = "line",
    x0 = 12536, x1 = 12536,
    y0 = 0,     y1 = 0.8,
    line = list(
      dash = "dot",
      width = 2,
      color = "black"
    )
  ),
  # Horizontal dotted line up to the meeting point
  list(
    type = "line",
    x0 = 1,     x1 = 12536,
    y0 = 0.8,   y1 = 0.8,
    line = list(
      dash = "dot",
      width = 2,
      color = "black"
    )
  )
)

max_gdp <- max(df$gdp, na.rm=TRUE)

hdi_annots <- list(
  list(x = -0.11, xref = "paper", y = 0.275, yref = "y", text = "Low HDI",    showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13)),
  list(x = -0.11, xref = "paper", y = 0.625, yref = "y", text = "Medium HDI", showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13)),
  list(x = -0.11, xref = "paper", y = 0.75,  yref = "y", text = "High HDI",   showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13)),
  list(x = -0.11, xref = "paper", y = 0.9,   yref = "y", text = "Very High HDI", showarrow = FALSE, xanchor = "right", yanchor = "middle", font = list(size=13))
)


gdp_annots <- list(
  list(
    x = mean(c(1, 1086)), y = -0.045, text = "Low income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  ),
  list(
    x = mean(c(1086, 4255)), y = -0.045, text = "Lower-middle income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  ),
  list(
    x = mean(c(4255, 13206)), y = -0.045, text = "Upper-middle income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  ),
  list(
    x = mean(c(13206, max_gdp)), y = -0.045, text = "High income", showarrow = FALSE, xanchor = "center", yanchor="top", font = list(size=12)
  )
)

axis_band_annotations <- c(hdi_annots, gdp_annots)

# 4) Build the animated scatter
palette <- brewer.pal(8, "Set2")
p <- plot_ly(
  df,
  x         = ~gdp,    y         = ~hdi,
  frame     = ~Year,
  type      = "scatter",  mode = "markers",
  color     = ~owid_region, colors = palette,
  size      = ~population_historical, sizes = c(5,500),
  text      = ~hover_text, hoverinfo = "text",
  marker    = list(opacity=0.8, line=list(color="black",width=1))
)

# 5) Pause button
pause_btn <- list(
  list(type="buttons", showactive=FALSE,
       x=-0.25, y=-0.237, xanchor="left",
       buttons=list(
         list(method="animate",
              args=list(NULL,
                        list(mode="immediate",
                             frame=list(duration=0,redraw=FALSE),
                             transition=list(duration=0))),
              label="Pause")
       ))
)

# 6) Finalize & force frame creation
widget <- p %>%
  animation_opts(frame=800, transition=0, redraw=FALSE) %>%
  layout(
    shapes      = c(gdp_shapes, hdi_shapes, threshold_shapes),
    annotations = axis_band_annotations,
    xaxis       = list(
      type     = "log",
      title    = "GDP per capita (international-$, 2021 prices)",
      tickvals = c(1000,5000,10000,50000,100000),
      ticktext = c("$1k","$5k","$10k","$50k","$100k")
    ),
    yaxis       = list(
      title    = "Human Development Index",
      range    = c(0,1),
      tickvals = seq(0,1,0.1)
    ),
    margin      = list(l = 155, b = 90),
    legend      = list(title=list(text="Region")),
    updatemenus = pause_btn
  ) %>%
  config(displayModeBar=FALSE) %>%
  plotly_build()

# 7) Attach JS overlays via onRender, passing stats via window.stats_panel_data
widget <- onRender(
  widget,
  "
  function(el, x) {
  var stats = window.stats_panel_data;
  var years = window.years_panel;

  // --- Fill year picker dropdown ---
  var picker = document.getElementById('year-picker');
  if (picker && picker.options.length === 0 && years && years.length) {
    years.forEach(function(y) {
      var opt = document.createElement('option');
      opt.value = y;
      opt.text = y;
      picker.appendChild(opt);
    });
    picker.onchange = function() {
      updateStats(this.value);
      // Animate plot to this year (frame)
      var gd = el.querySelector('.js-plotly-plot');
      if (gd) {
        Plotly.animate(gd, {frame: {redraw: true, name: this.value}}, {mode: 'immediate'});
      }
    };
  }

  // --- Fill size legend (looks the same) ---
  var sl = document.getElementById('size-legend');
  if (sl && !sl.innerHTML) {
    sl.style.background = 'rgba(255,255,255,0.97)';
    sl.style.borderRadius = '8px';
    sl.style.boxShadow = '0 0 6px rgba(0,0,0,0.10)';
    sl.style.fontSize = '13px';
    sl.style.padding = '10px 10px';
    sl.innerHTML =
      '<div><strong>Circles sized by</strong><br>Population</div>' +
      '<div style=\"margin-top:6px;display:flex;align-items:center;gap:6px;\">' +
        '<div style=\"width:20px;height:20px;border-radius:50%;background:lightgray;\"></div>' +
        '<span>600&nbsp;M</span>' +
      '</div>' +
      '<div style=\"margin-top:4px;display:flex;align-items:center;gap:6px;\">' +
        '<div style=\"width:30px;height:30px;border-radius:50%;background:lightgray;\"></div>' +
        '<span>1.4&nbsp;B</span>' +
      '</div>';
  }

  // --- Fill stats panel ---
  function updateStats(year) {
    var sb = document.getElementById('stats-box');
    if (!sb) return;
    var sub  = stats.filter(d => +d.Year == +year);
    var devo = sub.find(d => d.dev_status=='Developing'),
        dev  = sub.find(d => d.dev_status=='Developed');
    if (!devo || !dev) {
      sb.innerHTML = '<span style=\"color:red;\">No data for year ' + year + '</span>';
      return;
    }
    sb.style.background = 'rgba(255,255,255,0.98)';
    sb.style.borderRadius = '10px';
    sb.style.boxShadow = '0 2px 10px rgba(0,0,0,0.11)';
    sb.style.fontSize = '14px';
    sb.style.padding = '12px 12px';
    sb.innerHTML =
      '<b>Year: ' + year + '</b><br>' +
      '<b>Developing</b><br>' +
      devo.count + ' countries<br>' +
      'Avg GDP: $' + (+devo.avg_gdp).toLocaleString() + '<br>' +
      'Avg HDI: '  + (+devo.avg_hdi).toFixed(3) + '<br><br>' +
      '<b>Developed</b><br>' +
      dev.count  + ' countries<br>' +
      'Avg GDP: $' + (+dev.avg_gdp).toLocaleString() + '<br>' +
      'Avg HDI: '  + (+dev.avg_hdi).toFixed(3);
  }

  // --- Set initial year and populate stats on load ---
  if (picker && years && years.length) {
    picker.value = years[0];
    updateStats(years[0]);
    // Animate plot to first year
    var gd = el.querySelector('.js-plotly-plot');
    if (gd) {
      Plotly.animate(gd, {frame: {redraw: true, name: years[0]}}, {mode: 'immediate'});
    }
  }
  
}
  
  "
)

# 8) Inject stats JSON and print widget together
browsable(
  tagList(
    widget,   # your plotly chart comes FIRST, no overlays
    tags$div(
      id = "bottom-panel-row",
      style = "display:flex;flex-direction:row;gap:28px;align-items:flex-start;justify-content:flex-end;margin-top:16px;margin-right:32px;",
      # 1. Dropdown & label
      tags$div(
        style="display:flex;align-items:center;gap:8px;",
        tags$label("Select year to update stats panel:", `for`="year-picker", style="font-size:15px;"),
        tags$select(id="year-picker", style="font-size:15px;")
      ),
      # 2. Stats panel (empty placeholder, filled by JS) -- moved up
      tags$div(id="stats-box", style="min-width:210px;"),
      # 3. Size legend (empty placeholder, filled by JS) -- now last
      tags$div(id="size-legend", style="min-width:120px;")
    ),
    # JS for populating options and updating panels
    tags$script(HTML(sprintf("window.stats_panel_data = %s;", stats_json))),
    tags$script(HTML(sprintf("window.years_panel = %s;", years_json)))
  )
)
```
